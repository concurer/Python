{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"week 4 P3","provenance":[],"authorship_tag":"ABX9TyNKC64UGfzfgpNm2RadCUh5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ICm0yKVcgI0o","executionInfo":{"status":"ok","timestamp":1621478200630,"user_tz":-330,"elapsed":1101,"user":{"displayName":"ADITYA GANESH BATTIN","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhfFdRlRUI1HiY2NnyNGUGOJcql2Z6ApvaHynw9=s64","userId":"11140891909434136566"}},"outputId":"3d9599fe-aa7c-4f44-b6e3-6eb51a345861"},"source":["\"\"\"Lambada Expressions \"\"\"\n","is_even = lambda a : a%2==0\n","last_char = lambda s : s[-1]\n","reverse_string = lambda r : r[::-1]\n","\n","print(is_even(71))\n","print(last_char(\"Aditya\"))\n","print(reverse_string(\"FUCK\"))\n","\n","#lambda expressions with \"if else\" in it \n","\"\"\"syntax:\n","   function = lambda s : outif if expression else outelse\n","\n","   here  outif is output if is true then \n","   and outelse is output else is true then \"\"\"\n","import random\n","num = random.randint(1,10)\n","fun = lambda a : \"Congratulations\" if a>8 else \" you passed \"\n","print(fun(num))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["False\n","a\n","KCUF\n","Congratulations\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BEJjnAFeofun","executionInfo":{"status":"ok","timestamp":1621479398258,"user_tz":-330,"elapsed":1023,"user":{"displayName":"ADITYA GANESH BATTIN","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhfFdRlRUI1HiY2NnyNGUGOJcql2Z6ApvaHynw9=s64","userId":"11140891909434136566"}},"outputId":"a372c67f-6215-4d13-d188-e7dd294cd0d3"},"source":["\"\"\" Map function is used to map a list , tuple , etc to a function to have a output collection which r=then can be converted into any other\n","list or tuple or etc \n","syntax:\n","map(function,collection) \"\"\"\n","\n","list_1 = [1,2,3,4]\n","def func(a):\n","  return a**2\n","print(map(func,list_1))\n","\"\"\" the maping can be stored in any form using the forn=m type like list\"\"\"\n","\n","print(\"----------------------------------------------------------------------\")\n","\n","list_2 = list(map(func,list_1))\n","print(list_2)\n","\n","print('----------------------------------------------------------------------')\n","\n","list_3 = tuple(map(lambda a : a**2 , range(1,11))) \n","print(list_3)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["<map object at 0x7f3bc0803ad0>\n","----------------------------------------------------------------------\n","[1, 4, 9, 16]\n","----------------------------------------------------------------------\n","(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KMzRbe74tE6L"},"source":[""],"execution_count":null,"outputs":[]}]}